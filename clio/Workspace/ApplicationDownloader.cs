using System.Collections.Generic;
using System.IO;
using System.Linq;
using Clio.Common;
using Clio.WebApplication;

namespace Clio.Workspace
{

	#region Interface: ILibrariesDownloader

	public interface IApplicationDownloader
	{

		#region Methods: Public

		void Download(IEnumerable<string> packagesNames = null); 
		void DownloadAutogeneratedPackages(IEnumerable<string> packagesNames);
		void DownloadAutogeneratedPackages(string packageName);

		#endregion

	}

	#endregion

	#region Class: LibrariesDownloader

	public class ApplicationDownloader : IApplicationDownloader
	{

		#region Constants: Private

		private const string SchemasFolderName = "Schemas";
		private const string AutogeneratedFolderName = "Autogenerated";

		#endregion

		#region Fields: Private

		private readonly IDownloader _downloader;
		private readonly IServiceUrlBuilder _serviceUrlBuilder;
		private readonly IWorkspacePathBuilder _workspacePathBuilder;
		private readonly IWorkingDirectoriesProvider _workingDirectoriesProvider;
		private readonly IFileSystem _fileSystem;
		private readonly string _autogeneratedPkgUrl;
		private DownloadInfo[] _downloadInfos;

		#endregion

		#region Constructors: Public

		public ApplicationDownloader(IDownloader downloader, IServiceUrlBuilder serviceUrlBuilder,
				IWorkspacePathBuilder workspacePathBuilder, IWorkingDirectoriesProvider workingDirectoriesProvider,
				IFileSystem fileSystem) {
			downloader.CheckArgumentNull(nameof(downloader));
			serviceUrlBuilder.CheckArgumentNull(nameof(serviceUrlBuilder));
			workspacePathBuilder.CheckArgumentNull(nameof(workspacePathBuilder));
			workingDirectoriesProvider.CheckArgumentNull(nameof(workingDirectoriesProvider));
			fileSystem.CheckArgumentNull(nameof(fileSystem));
			_downloader = downloader;
			_serviceUrlBuilder = serviceUrlBuilder;
			_workspacePathBuilder = workspacePathBuilder;
			_workingDirectoriesProvider = workingDirectoriesProvider;
			_autogeneratedPkgUrl = GetUrl($"/rest/CreatioApiGateway/GetAutogeneratedFolder");
			_fileSystem = fileSystem;
			InitDownloadInfos();
		}

		#endregion

		#region Properties: Private

		private string ApplicationFolderPath => _workspacePathBuilder.ApplicationFolderPath;
		private string CoreBinFolderPath  => _workspacePathBuilder.CoreBinFolderPath;
		private string LibFolderPath  => _workspacePathBuilder.LibFolderPath;
		private string ConfigurationBinFolderPath  => _workspacePathBuilder.ConfigurationBinFolderPath;
		private bool IsWorkspace => _workspacePathBuilder.IsWorkspace;

		#endregion

		#region Methods: Private

		private void InitDownloadInfos() {
			_downloadInfos = new [] {
					new DownloadInfo(GetUrl("/rest/CreatioApiGateway/GetCoreBinFolder"),
						"CoreBin", CoreBinFolderPath),
					new DownloadInfo(GetUrl("/rest/CreatioApiGateway/GetConfigurationLibFolder"),
						"Lib", LibFolderPath),
					new DownloadInfo(GetUrl("/rest/CreatioApiGateway/GetConfigurationBinFolder"),
						"ConfigurationBin", ConfigurationBinFolderPath),
				};
		}

		private IEnumerable<DownloadInfo> GetAutogeneratedPackagesDownloadInfos(IEnumerable<string> packagesNames) =>
			packagesNames.Select(packageName => new DownloadInfo(_autogeneratedPkgUrl, 
				$"Autogenerated.{packageName}", BuildAutogeneratedPackagePath(packageName), 
				GetPackageRequestData(packageName))); 

		private string GetUrl(string endpoint) => _serviceUrlBuilder.Build(endpoint);

		private string BuildAutogeneratedPackagePath(string packageName) =>
			Path.Combine(BuildPackagePath(packageName), AutogeneratedFolderName);

		private string BuildSchemasPackagePath(string packageName) =>
			Path.Combine(BuildPackagePath(packageName), SchemasFolderName);

		
		private string BuildPackagePath(string packageName) => IsWorkspace
			? _workspacePathBuilder.BuildPackagePath(packageName)
			: Path.Combine(_workingDirectoriesProvider.CurrentDirectory, packageName);

		private string GetSafePackageName(string packageName) => packageName
			.Replace(" ", string.Empty)
			.Replace(",", "\",\"");

		private string GetPackageRequestData(string packageName) {
			string safePackageName = GetSafePackageName(packageName);
			return $"\"{safePackageName}\"";;
		}

		private void DeleteSourceSchemasFromAutogenerated(IEnumerable<string> packagesNames) {
			foreach (string packageName in packagesNames) {
				string schemasPackagePath = BuildSchemasPackagePath(packageName);
				FileInfo[] filesInfos = _fileSystem
					.GetFilesInfos(schemasPackagePath, "*.cs", SearchOption.AllDirectories);
				foreach (var fileInfo in filesInfos) {
					string autogeneratedFilePath = Path.Combine(BuildAutogeneratedPackagePath(packageName), "Src",
						$"{_fileSystem.GetFileNameWithoutExtension(fileInfo)}.{packageName}.cs");
					_fileSystem.DeleteFileIfExists(autogeneratedFilePath);
				}
			}
		}

		private void CreateMarkerPackagesFolder() =>
			_fileSystem.CreateDirectory(Path.Combine(ApplicationFolderPath, "packages"));

		#endregion

		#region Methods: Public

		public void Download(IEnumerable<string> packagesNames = null) {
			packagesNames = packagesNames ?? Enumerable.Empty<string>();
			IEnumerable<DownloadInfo> autogeneratedPackagesDownloadInfos = 
				GetAutogeneratedPackagesDownloadInfos(packagesNames);
			IEnumerable<DownloadInfo> allDownloadInfos = _downloadInfos.Union(autogeneratedPackagesDownloadInfos);
			_downloader.Download(allDownloadInfos);
			CreateMarkerPackagesFolder();
			DeleteSourceSchemasFromAutogenerated(packagesNames);
		}

		public void DownloadAutogeneratedPackages(IEnumerable<string> packagesNames) {
			IEnumerable<DownloadInfo> autogeneratedPackagesDownloadInfos = 
				GetAutogeneratedPackagesDownloadInfos(packagesNames);
			_downloader.Download(autogeneratedPackagesDownloadInfos);
			DeleteSourceSchemasFromAutogenerated(packagesNames);
		}

		public void DownloadAutogeneratedPackages(string packageName) =>
			DownloadAutogeneratedPackages(new[] { packageName });

		#endregion

	}

	#endregion

}