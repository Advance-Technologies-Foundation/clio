// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace clio.ApiTest.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("PublishWorkspaceCommand")]
    [NUnit.Framework.CategoryAttribute("PublishWorkspaceCommand")]
    public partial class PublishWorkspaceCommandFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "PublishWorkspaceCommand"};
        
#line 1 "PublishWorkspaceCommand.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "PublishWorkspaceCommand", "**Docs missing for PublishWorkspaceCommand**", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User can specify temp dir")]
        [NUnit.Framework.CategoryAttribute("PublishWorkspaceCommand")]
        public void UserCanSpecifyTempDir()
        {
            string[] tagsOfScenario = new string[] {
                    "PublishWorkspaceCommand"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User can specify temp dir", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
  testRunner.Given("I set env variable CLIO_WORKING_DIRECTORY to \"C:\\TempDir\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "arg",
                            "value"});
                table1.AddRow(new string[] {
                            "-h",
                            "C:\\AppHub2"});
                table1.AddRow(new string[] {
                            "-r",
                            "C:\\MyWorkspace"});
                table1.AddRow(new string[] {
                            "-v",
                            "0.0.2"});
                table1.AddRow(new string[] {
                            "-a",
                            "MrktHootsuiteConnector"});
#line 8
  testRunner.When("I execute publish-app with args:", ((string)(null)), table1, "When ");
#line hidden
#line 15
  testRunner.Then("I assert that clio uses CLIO_WORKING_DIRECTORY directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("User can omit specifing temp dir")]
        [NUnit.Framework.CategoryAttribute("PublishWorkspaceCommand")]
        public void UserCanOmitSpecifingTempDir()
        {
            string[] tagsOfScenario = new string[] {
                    "PublishWorkspaceCommand"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User can omit specifing temp dir", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 18
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 19
  testRunner.Given("I do not set env variable CLIO_WORKING_DIRECTORY", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "arg",
                            "value"});
                table2.AddRow(new string[] {
                            "-h",
                            "C:\\AppHub2"});
                table2.AddRow(new string[] {
                            "-r",
                            "C:\\MyWorkspace"});
                table2.AddRow(new string[] {
                            "-v",
                            "0.0.2"});
                table2.AddRow(new string[] {
                            "-a",
                            "MrktHootsuiteConnector"});
#line 20
  testRunner.When("I execute publish-app with args:", ((string)(null)), table2, "When ");
#line hidden
#line 27
  testRunner.Then("I assert that clio uses default directory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
