name: release-to-nuget

on:
  release:
    types: [published]

jobs:
  build:
    name: release-to-nuget
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Test Solution
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
            $ErrorActionPreference = 'Stop'
            dotnet test .\clio.tests\clio.tests.csproj -nowarn:none `
            /p:CollectCoverage=true /p:CoverletOutputFormat=opencover `
            /p:CoverletOutput=".\..\TestResults\coverage.opencover.xml";

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_URL: ${{ secrets.SONAR_URL }}
        shell: powershell
        run: |
          C:\Tools\dotnet-coverage.exe collect "dotnet test .\clio.tests\clio.tests.csproj" -f xml -o "coverage.xml";
          dotnet sonarscanner begin /k:"clio" /d:sonar.host.url="${{ secrets.SONAR_URL }}" `
          /d:sonar.login="${{ secrets.SONAR_TOKEN }}" `
          /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml;
          dotnet build .\clio\clio.csproj -c Release --no-incremental;
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}";
          dotnet build-server shutdown;

      - name: Extract Version from Tag
        id: extract_version
        run: |
          $tag = "${{ github.event.release.tag_name }}"
          # Remove 'v' prefix if present (e.g., v8.0.1.42 -> 8.0.1.42)
          $version = $tag -replace '^v', ''
          
          # Validate version format (should be like 8.0.1.42)
          if ($version -notmatch '^\d+\.\d+\.\d+\.\d+$') {
            throw "Invalid version format: $version. Expected format: X.Y.Z.W (e.g., 8.0.1.42)"
          }
          
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "Extracted version: $version"
        shell: powershell

      - name: Pack clio with release version
        run: |
          $version = "${{ steps.extract_version.outputs.VERSION }}"
          echo "Packing clio with version: $version"
          dotnet pack .\clio\clio.csproj --configuration Release --output ./output /p:AssemblyVersion=$version /p:FileVersion=$version /p:Version=$version
        shell: powershell

      - name: Publish to NuGet
        env:
          NUGET_API_KEY: ${{ secrets.CLIO_NUGET_API_KEY }}
        run: |
          $version = "${{ steps.extract_version.outputs.VERSION }}"
          echo "Publishing clio package version $version to NuGet..."
          dotnet nuget push ".\output\*.nupkg" --api-key ${{ secrets.CLIO_NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
          echo "Successfully published clio $version to NuGet!"
